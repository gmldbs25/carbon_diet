{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "f53f92cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "## web crawling '만개의레시피'\n",
    "\n",
    "import urllib.request\n",
    "from bs4 import BeautifulSoup as bs\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "import time\n",
    "import pandas as pd\n",
    "from selenium.webdriver.support.ui import WebDriverWait\n",
    "from selenium.webdriver.support import expected_conditions as EC\n",
    "from selenium.webdriver.common.by import By\n",
    "import urllib\n",
    "import os\n",
    "from selenium.common.exceptions import NoSuchElementException,StaleElementReferenceException\n",
    "\n",
    "#검색할 RCP_NM list\n",
    "recipe=pd.read_csv(\"d:\\\\data.csv\", encoding = 'euc-kr')\n",
    "name_list=list(recipe[\"식품명\"])\n",
    "path=\"C:\\\\chromedriver.exe\"\n",
    "\n",
    "\n",
    "driver=webdriver.Chrome(path)\n",
    "driver.maximize_window()\n",
    "\n",
    "\n",
    "food_dicts=[]\n",
    "x_data1=[]\n",
    "for keyword in name_list:\n",
    "    driver.get('https://www.10000recipe.com/index.html')\n",
    "    \n",
    "    # 검색창 : 'RCP_NM'\n",
    "    driver.find_element_by_id('srhRecipeText').send_keys(keyword)\n",
    "    driver.find_element_by_class_name('glyphicon-search').click()\n",
    "    time.sleep(1)\n",
    "    \n",
    "    try:\n",
    "        # 정확성순으로 보기\n",
    "        ac=driver.find_element_by_class_name('nav>li')\n",
    "        ac.click()\n",
    "        recipe=driver.find_element_by_class_name('ea4>li')\n",
    "        recipe.click()\n",
    "    except NoSuchElementException:\n",
    "        continue\n",
    "    \n",
    "   # time.sleep(1)\n",
    "\n",
    "    req=urllib.request.Request(driver.current_url)\n",
    "    sourcecode=urllib.request.urlopen(driver.current_url).read()\n",
    "    soup=bs(sourcecode, \"html.parser\")\n",
    "    \n",
    "    recipe_title=[] # RCP_NM\n",
    "    recipe_source={} # RCP_PARTS_DTLS\n",
    "    recipe_step=[] # RCP MANUAL\n",
    "    recipe_img=[] # IMG\n",
    "    \n",
    "    # RCP_NM \n",
    "    res=soup.find('div', 'view2_summary')\n",
    "    res=res.find('h3')\n",
    "    recipe_title.append(res.get_text())\n",
    "    res=soup.find('div', 'ready_ingre3')\n",
    "\n",
    "    # RCP_PARTS_DTLS\n",
    "    try :\n",
    "        for n in res.find_all('ul'):\n",
    "            source=[]\n",
    "            title=n.find('b').get_text()\n",
    "            recipe_source[title]=''\n",
    "            for tmp in n.find_all('li'):\n",
    "                source.append(tmp.get_text().replace(' ','').replace(' ',''))\n",
    "            recipe_source[title]=source\n",
    "    except (AttributeError): #검색결과없음 예외처리\n",
    "        xdata={'음식명': keyword}\n",
    "        x_data1.append(xdata)\n",
    "        x_data2=pd.DataFrame(x_data1)\n",
    "        x_data2.to_csv('D:\\\\예외.csv', encoding='cp949') \n",
    "        pass\n",
    "\n",
    "    # RCP MANUAL\n",
    "    try:\n",
    "        res=soup.find('div','view_step')\n",
    "        i=0\n",
    "        for n in res.find_all('div','view_step_cont'):\n",
    "            i=i+1\n",
    "            recipe_step.append(str(i)+' '+n.get_text().replace('\\n',' '))\n",
    "    except (AttributeError):\n",
    "        pass\n",
    "\n",
    "    # IMG\n",
    "    res=soup.find('div', 'centeredcrop')\n",
    "    res=res.find('img')\n",
    "    recipe_img=res.get('src')\n",
    "    \n",
    "    # Data Dictionary\n",
    "    food_dict={\"본이름\":keyword, \"이름\":recipe_title,\n",
    "              \"재료\":recipe_source,\n",
    "              \"순서\":recipe_step,\n",
    "              \"이미지\":recipe_img }\n",
    "    food_dicts.append(food_dict)\n",
    "\n",
    "    \n",
    "    data=pd.DataFrame(food_dicts)   \n",
    "    data.to_csv('D:\\\\음식.csv', encoding='cp949') \n",
    "\n",
    "    \n",
    "      "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
